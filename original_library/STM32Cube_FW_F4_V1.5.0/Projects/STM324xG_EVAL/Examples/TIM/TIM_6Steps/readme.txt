/**
  @page TIM_6Steps TIM 6 Steps example

  @verbatim
  ******************** (C) COPYRIGHT 2015 STMicroelectronics *******************
  * @file    TIM/TIM_6Steps/readme.txt 
  * @author  MCD Application Team
  * @version V1.2.1
  * @date    13-March-2015
  * @brief   Description of the TIM 6 Steps example.
  ******************************************************************************
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to configure the TIM1 peripheral to generate 6 Steps.
The STM32F4xx TIM1 peripheral offers the possibility to program in advance the 
configuration for the next TIM1 outputs behaviour (step) and change the configuration
of all the channels at the same time. This operation is possible when the COM 
(commutation) event is used.

The COM event can be generated by software by setting the COM bit in the TIM1_EGR
register or by hardware (on TRC rising edge).
In this example, a software COM event is generated each 1 ms: using the SysTick 
interrupt.

The TIM1 is configured in Timing Mode, each time a COM event occurs, a new TIM1
configuration will be set in advance. Only changed states are programmed. 

The break Polarity is used at High level.

The following Table describes the TIM1 Channels states:

@verbatim
                     -----------------------------------------------
                    | Step1 | Step2 | Step3 | Step4 | Step5 | Step6 |
          ----------------------------------------------------------
         |Channel1  | 1(PWM)|   0   |   0   |   0   |   0   |1(PWM) |
          ----------------------------------------------------------
         |Channel1N |   0   |   0   |1(PWM) |1(PWM) |   0   |   0   |
          ----------------------------------------------------------
         |Channel2  |   0   |   0   |   0   |1(PWM) |1(PWM) |   0   |
          ----------------------------------------------------------
         |Channel2N |1(PWM) |1(PWM) |   0   |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3  |   0   |1(PWM) |1(PWM) |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3N |   0   |   0   |   0   |   0   |1(PWM) |1(PWM) |
          -----------------------------------------------------------
   
   
 Channel1  (PA.08)   |||||||_________________________________||||||||||||||_________________________________|||||||
 Channel1N (PB.13)   _______________||||||||||||||||_______________________________||||||||||||||||________________
                                                    
 Channel2  (PE.11)   _______________________||||||||||||||||_______________________________||||||||||||||||________
 Channel2N (PB.14)   |||||||||||||||________________________________|||||||||||||||________________________________
                                                    
 Channel3  (PE.13)   _______||||||||||||||||_______________________________||||||||||||||||________________________
 Channel3N (PB.15)   ________________________________|||||||||||||||________________________________|||||||||||||||
   
@endverbatim


@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application needs to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.


@par Directory contents 

  - TIM/TIM_6Steps/Inc/stm32f4xx_hal_conf.h     HAL configuration file
  - TIM/TIM_6Steps/Inc/stm32f4xx_it.h           Interrupt handlers header file
  - TIM/TIM_6Steps/Inc/main.h                   Main program header file  
  - TIM/TIM_6Steps/Src/stm32f4xx_it.c           Interrupt handlers
  - TIM/TIM_6Steps/Src/main.c                   Main program
  - TIM/TIM_6Steps/Src/stm32f4xx_hal_msp.c      HAL MSP module
  - TIM/TIM_6Steps/Src/system_stm32f4xx.c       STM32F4xx system clock configuration file

      
@par Hardware and Software environment 

  - This example runs on STM32F407xx/417xx devices.
    
  - This example has been tested with STMicroelectronics STM324xG-EVAL RevC 
    evaluation boards and can be easily tailored to any other supported device and development board

  - STM324xG-EVAL RevC Set-up
    - Connect the TIM1 pins to an oscilloscope to monitor the different waveforms:
      - TIM1_CH1   pin (PA.08)
      - TIM1_CH1N  pin (PB.13)
      - TIM1_CH2   pin (PE.11)
      - TIM1_CH2N  pin (PB.14)
      - TIM1_CH3   pin (PE.13)
      - TIM1_CH3N  pin (PB.15)
      
    - Connect TIM1 break pin TIM1_BKIN pin (PB.12) to the GND. To break outputs,
      switch the level from 0V to 3.3V.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
